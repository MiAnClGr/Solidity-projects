// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

import "./createArtist.sol";

contract MusicPay is createArtist {

    // start a contract with venue that with an agreed upon payment, to be paid at a particular time (after performance)
    // variable - payment, time of payment

    // uint public payment;
    // uint public performanceTime;

    address owner;

    bool public hasArtistAgreed;
    bool public hasVenueAgreed;
    
    address payable public artist;
    // address public venue; 


    enum State {notCompleted, bookingComplete, performanceCompleted, paymentComplete} // need to fix

    mapping(uint => Gig) public Gigs;
    uint public gigNumber = 0;

    struct Gig {
        uint _gigNumber;
        uint payment;
        uint time;
        bool agreed;
        address venue;
        string venueName;
        string artistName;
        State currentState;
        bool depositPaid;
        uint agreementTime;
        
    }

    event bookingMade (uint _payment, uint _time, string _venueName);
    event bookingFeePaid (bool _depositPaid);

    

   

    constructor() {
        msg.sender == owner;
    }
        
       
    // }

    // modifier onlyVenue() {
    //     require(msg.sender == venue);
    //     _;
    // }

    // modifier onlyVenue(uint _gigNum){
    //     require(_gigNum == Gigs[gigRequest]);
    //     require(msg.sender == gigRequest.venue);
    //     _;
    // }

    // modifier onlyArtist() {
    //     require(msg.sender == artist);
    //     _;
    // }

 

    function bookingRequest(uint _payment, uint _time, string memory _venueName, string memory _artistName) public payable {

        Gig storage gigRequest = Gigs[gigNumber];
        gigNumber ++;
        gigRequest._gigNumber = gigNumber;
        gigRequest.payment = _payment;
        gigRequest.time = block.timestamp + _time;
        gigRequest.venueName = _venueName;
        gigRequest.artistName = _artistName;
        hasVenueAgreed = true;
        gigRequest.venue = msg.sender;
        emit bookingMade(_payment, block.timestamp, _venueName);
        
    }

  
    function payBookingDeposit(uint _gigNum) public payable {
        Gig storage gigRequest = Gigs[_gigNum];
        require(block.timestamp < (gigRequest.agreementTime + 86400)); // 24 hours to pay 
        require(msg.sender == gigRequest.venue);
        require(msg.value == gigRequest.payment);
       // require(gigRequest.currentState == State.notCompleted);
        require(gigRequest.agreed == true);
        gigRequest.depositPaid = true;
        emit bookingFeePaid(true);    
    }


    function agreement(uint _gigNum) public {
        Gig storage gigRequest = Gigs[_gigNum];
        require(msg.sender == ArtistsbyAddress[gigRequest.artistName]);
        gigRequest.agreed = true;
        gigRequest.agreementTime = block.timestamp;

        if(gigRequest.agreed && hasVenueAgreed) {
            gigRequest.currentState = State.bookingComplete;
        }
    }


    function confirmPerformance(uint _gigNum) public {
        Gig storage gigRequest = Gigs[_gigNum];
        require(msg.sender == gigRequest.venue);
        require(block.timestamp > gigRequest.time);
        require(gigRequest.depositPaid == true);
        require(gigRequest.currentState == State.bookingComplete);
        gigRequest.currentState = State.performanceCompleted;
        
    }


    function beenPaid(uint _gigNum) public view returns(bool) {
        Gig storage gigRequest = Gigs[_gigNum];
        require(msg.sender == ArtistsbyAddress[gigRequest.artistName]);
        if(gigRequest.depositPaid == true){
            return true;
        }
        
        else {
            return false;
        }
            
        
    }

    function withdraw(uint _gigNum) public payable {

        Gig storage gigRequest = Gigs[_gigNum];
        require(msg.sender == ArtistsbyAddress[gigRequest.artistName]);
        require(gigRequest.depositPaid == true);
        require(block.timestamp >= gigRequest.time);
        require(gigRequest.currentState == State.performanceCompleted);
        payable(msg.sender).transfer(gigRequest.payment);
       
        
    }

    function checkBalance() public view returns(uint) {
        return address(this).balance;
    }




}
